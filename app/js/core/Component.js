/**
 * @author Joe Adams
 */

goog.provide('CrunchJS.Component');

/**
 * This class is the basic component class. Components are added to entities to store state. They are best used to only store data, and to not perform logic. Systems are desgined to perform all logic for components. This distinction makes syncing data much easier.
 * All a component needs is the name property, and all components will be given an entityId field which will be the entity id that contains it. 
 * The component has a several hooks that allow for customization for syncing. The first is the toObj/fromObj functions. The toObj method returns an object that can be JSON serializable. fromObj
 * takes an object and creates an instance of the component from it. It is a static method.
 * The getUpdates/update methods are used to either get an object that represents the updated data to sync, or take an update object and update the current object with the data. 
 * @class The Abstract Component Class
 * @constructor
 * @example
 *
 * goog.provide('CrunchJS.Component');
 * 
 * var Position = function(x,y){
 * 	// Initialize here
 * 	this.x = x;
 * 	this.y = y;
 * }
 *
 * goog.inherits(Position, CrunchJS.Component);
 *
 * // Always ad the name field
 * Position.prototype.name = 'Position';
 *
 *
 * var world = new CrunchJS.World();
 *
 * var entityId = world.createEntity();
 * 
 * var pos1 = new Position(10, 20);
 *
 * world.addComponent(entityId, pos1);
 *
 * // True
 * world.getComponent(entityId, 'Position').x == 10;
 */
CrunchJS.Component = function(data) {
	/**
	 * The scene that the component is a part of
	 * @type {CrunchJS.Scene}
	 */
	this._scene = null;

	if(data)
		this.entityId = data.entityId;
};

/**
 * Creates an instance of this component with the values from obj
 * @param  {Object} obj The values to create the instance with
 * @return {CrunchJS.Component} The instance of the component
 */
CrunchJS.Component.__proto__.fromObj = function(obj) {
	return new this(obj);
};

/**
 * Creates a JSON serializable object out of the component
 * @return {Object} The JSON serializable object
 */
CrunchJS.Component.prototype.toObj = function(o) {
	if(o){
		o.entityId = this.entityId;
		return o;
	}
	var obj = goog.object.filter(this, function(val, key){
		return !goog.isFunction(val);
	}, this);

	obj._scene = undefined;

	return obj;
};

/**
 * Gets an object describing the updates that have been made to this component
 * @return {Object}
 */
CrunchJS.Component.prototype.getUpdates = function() {
	return this.toObj();
};

/**
 * Updates the current instance with the values in obj
 * @param  {Object} obj The object generated by the getUpdates Method
 */
CrunchJS.Component.prototype.update = function(obj) {
	goog.object.forEach(obj, function(prop, key){
		this[key] = prop;
	},this);
};

/**
 * Called if the component was updated to tell it that its updates have been sent, so it can reset the update flags
 */
CrunchJS.Component.prototype.resetUpdates = function() {
	
};

/**
 * Called whenever the component has been updated to notify the component manager so that it can sync the data	
 */
CrunchJS.Component.prototype.hasBeenUpdated = function() {
	if(goog.isDefAndNotNull(this.getScene())){
		this.getScene().fireEvent(CrunchJS.Events.ComponentUpdated, {
			entityId : this.entityId,
			compName : this.name
		});
	}
};

/**
 * Gets the scene the component is in
 * @return {CrunchJS.Scene} The scene
 */
CrunchJS.Component.prototype.getScene = function() {
	return this._scene;
};

/**
 * Sets the scene the component is in
 * @param {CrunchJS.Scene} scene The scene
 */
CrunchJS.Component.prototype.setScene = function(scene){
	this._scene = scene;
};



/**
 * The entity id that this component is a part of
 * @type {Number}
 */
CrunchJS.Component.prototype.entityId = null;

 